plotWD (data=wd10,ane=c("Ane1", "Ane2"),var="speed", type="rose", by="month")
require(plyr)
source('~/GitHub/WindResource/R/plotWD.R')
plotWD (data=wd10,ane=c("Ane1", "Ane2"),var="speed", type="profile", by="month")
plotWD (data=wd10,ane=c("Ane1", "Ane2"),var="speed", type="profile", by="hour")
plotWD (data=wd10,ane=c("Ane1", "Ane2"),var="speed", type="profile", by="hour",since="2013-02-01",to="2013-02-28")
plotWD (data=wd10,var="speed", type="sdfsf", by="hour")
tableWD (data=wd10,ane=c("Ane1", "Ane2"),var="speed", type="profile", by="month")
tableWD (data=wd10,ane=c("Ane1", "Ane2"),var="speed", type="profile", by="hour")
tableWD (data=wd10,ane=c("Ane1", "Ane2"),var="speed", type="profile", by="hour",since="2013-02-01",to="2013-02-28")
turbulence (wd10)
source('~/GitHub/WindResource/R/turbulence.R', echo=TRUE)
turbulence (wd10)
source('~/GitHub/WindResource/R/plotWD.R')
source('~/GitHub/WindResource/R/tableWD.R')
plotWD (data=wd10, type="turbulence")
source('~/GitHub/WindResource/R/tableWD.R')
plotWD (data=wd10, type="turbulence")
source('~/GitHub/WindResource/R/plotWD.R')
plotWD (data=wd10, type="turbulence")
plotWD (data=wd, var="speed", type="histogram", by="none")
plotWD (data=wd10, var="speed", type="histogram", by="none")
plotWD (data=wd10, var="speed", type="histogram", by="month")
plotWD (data=wd10, var="speed", type="histogram", by="hour")
tableWD(data=wd10,var="speed", type="histogram", by="none")
tableWD (data=wd10, type="turbulence")
plot.wind.serie<-function(wd,
year,
month,
vars=c("Ave","Min","Max","Temp","Pres","Dir"),
axis=c("Ave","Min","Max","Temp","Pres","Dir")) {
require (googleVis)
data<-data.frame(dt=as.POSIXct(NA),val=NA,type=NA)
colorlines<-"["
# 'blue', 'lightblue', 'lightblue', 'red']"
if ("Ave" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$speed$Ave,type="Ave")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'blue'",sep="")
}
if ("Min" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$speed$Min,type="Min")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Max" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$speed$Max,type="Max")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Temp" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$par$temp$value,type="Temp")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'green'",sep="")
}
if ("Pres" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$par$pres$value,type="Pres")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgreen'",sep="")
}
if ("Dir" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$dir$value,type="Dir")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'black'",sep="")
}
colorlines<-paste(colorlines,"]")
# Borro registros sin datos
data<-data[!is.na(data$dt),]
#data<-data[!is.na(data$val),]
# esto es para que las escalas de las 3 velocidades sea la misma. Se modifica el primer registro de la serie
max<-max(data[data$type=="Max","val"],na.rm = TRUE)
data[data$type=="Min",][1,2]<-max
data[data$type=="Ave",][1,2]<-max
if (length(axis)==1) {
scalecol<-paste("[",which(vars==axis[1])-1,"]",sep="")}
else {
scalecol<-paste("[",which(vars==axis[1])-1,",",which(vars==axis[2])-1,"]",sep="")}
dataplot <- gvisAnnotatedtimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
plot(dataplot)
}
plot.wind.serie(wd10,2013,2)
source('~/.active-rstudio-document', echo=TRUE)
plot.wind.serie(wd10,2013,2)
source('~/.active-rstudio-document', echo=TRUE)
plot.wind.serie(wd10,2013,2)
data<-data.frame(dt=as.POSIXct(NA),val=NA,type=NA)
head(data)
colorlines<-"["
# 'blue', 'lightblue', 'lightblue', 'red']"
if ("Ave" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$speed$ave,type="Ave")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'blue'",sep="")
}
vars
wd$time$dt
wd$speed$ave
wd$Ane1$ave
wd[["Ane1"]]$ave
str(wd10)
wd[["ane"]]$Ane1$ave
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$ave,type="Ave")[wd$time$year==year & wd$time$month==month,])
if ("Ave" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$ave,type="Ave")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'blue'",sep="")
}
if ("Min" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$speed$Min,type="Min")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Max" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$speed$Max,type="Max")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$min,type="Min")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Min" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$min,type="Min")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
if ("Max" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd[["ane"]]$Ane1$max,type="Max")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'lightgray'",sep="")
}
str(wd10)
vars
if ("Dir" %in% vars) {
data<- rbind(data,data.frame(dt=wd$time$dt,val=wd$dir$value,type="Dir")[wd$time$year==year & wd$time$month==month,])
colorlines<-paste(colorlines,ifelse(nchar(colorlines)==1,"",",")," 'black'",sep="")
}
Q
plot.wind.serie(wd10,2013,2,vars=c("Ave","Min","Max","Dir"),
axis=c("Ave","Min","Max","Dir"))
source('~/.active-rstudio-document', echo=TRUE)
plot.wind.serie(wd10,2013,2,vars=c("Ave","Min","Max","Dir"),
axis=c("Ave","Min","Max","Dir"))
source('~/.active-rstudio-document', echo=TRUE)
plot.wind.serie(wd10,2013,2,vars=c("Ave","Min","Max","Dir"),
axis=c("Ave","Min","Max","Dir"))
dataplot <- gvisAnnotatedtimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
gvisAnnotatedtimeLine
Q
install.packages(c("googleVis", "plotrix", "Rcmdr"))
gvisAnnotatedtimeLine
library("googleVis", lib.loc="C:/Users/mbonoli/Documents/R/win-library/3.0")
data(Stock)
Stock
A1 <- gvisAnnotatedTimeLine(Stock, datevar="Date",
numvar="Value", idvar="Device",
titlevar="Title", annotationvar="Annotation",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=600, height=350)
)
plot(A1)
source('~/.active-rstudio-document', echo=TRUE)
plot.wind.serie(wd10,2013,2,vars=c("Ave","Min","Max","Dir"),
axis=c("Ave","Min","Max","Dir"))
dataplot <- gvisAnnotatedtimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
head(data)
gvisAnnotatedtimeLine(data,
datevar="dt",
numvar="val",
idvar="type",
options=list(
colors=colorlines,
zoomStarttime=min(data$dt[wd$time$year==year & wd$time$month==month]),
zoomEndtime=min(data$dt[wd$time$year==year & wd$time$month==month])+3600*24,
legendPosition='newRow',
width=1000,
height=700,
scaleColumns="[0,3]", #scalecol,
scaleType='allfixed'))
gvisAnnotatedtimeLine(data,
datevar="dt",
numvar="val",
idvar="type")
head(Stock)
A1 <- gvisAnnotatedTimeLine(Stock, datevar="Date",
numvar="Value", idvar="Device",
titlevar="Title", annotationvar="Annotation",
options=list(displayAnnotations=TRUE,
legendPosition='newRow',
width=600, height=350)
)
plot(A1)
library("roxygen2")
Q
roxygenize(package.dir="WindResource",roxygen.dir="~/GitHub/WindResource")
library("WindResource")
data(wd10)
wd10$dir$ang_16 <- (wd10$dir$sect_16-1)*22.5
class(wd10)<-"windata"
runGUI(wd10)
plotWD (data=wd10, type="turbulence")
source('~/GitHub/WindResource/R/tableWD.R', echo=TRUE)
plotWD (data=wd10, type="turbulence")
tableWD (data=wd10, type="turbulence")
plotWD (data=wd10, type="turbulence")
source('~/GitHub/WindResource/R/plotWD.R', echo=TRUE)
plotWD (data=wd10, type="turbulence")
source('~/GitHub/WindResource/R/tableWD.R')
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/tableWD.R')
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/getParam.R', echo=TRUE)
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/tableWD.R')
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/tableWD.R')
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/tableWD.R')
tableWD (data=wd10, type="fit")
data <- data$ane[[i]]$ave
data <- data[!is.na(data)]
data <- data[data!=0]
vec <- seq(0, length(data), floor(length(data)/20000))
data <- data[vec]
# Estimating parameters for each distribution
a.wei <- fitWd(data, dist = "weibull")
a.gamma <- fitWd(data, dist = "gamma")
a.ln <- fitWd(data, dist = "lnorm")
# Taking parameters from each distribution
K <- getParam(a.wei, "k")
A <- getParam(a.wei, "A")
alpha <- getParam(a.gamma, "alpha")
beta <- getParam(a.gamma, "beta")
m <- getParam(a.ln, "meanlog")
D <- getParam(a.ln, "sdlog")
#Building the table
result[[i]] <- data.frame(cbind(Parameter1 = c(paste("k=", round(K, digits = 4)), paste("alpha=", round(alpha, digits = 4)), paste("m=", round(m, digits = 4))),
Parameter2 = c(paste("C=", round(A, digits = 4)), paste("beta=", round(beta, digits = 4)),paste("D=", round(D,digits = 4))),
loglik = c(round(a.wei$loglik, digits = 4), round(a.gamma$loglik, digits = 4), round(a.ln$loglik, digits = 4)),
aic = c(round(a.wei$aic, digits = 4), round(a.gamma$aic, digits = 4), round(a.ln$aic, digits = 4))),
row.names = c("Weibull", "Gamma", "Lognormal"))
}
tableWD (data=wd10, type="fit")
data <- data$ane[[i]]$ave
data <- data[!is.na(data)]
data <- data[data!=0]
vec <- seq(0, length(data), floor(length(data)/20000))
data <- data[vec]
# Estimating parameters for each distribution
a.wei <- fitWd(data, dist = "weibull")
a.gamma <- fitWd(data, dist = "gamma")
a.ln <- fitWd(data, dist = "lnorm")
# Taking parameters from each distribution
K <- getParam(a.wei, "k")
A <- getParam(a.wei, "A")
alpha <- getParam(a.gamma, "alpha")
beta <- getParam(a.gamma, "beta")
m <- getParam(a.ln, "meanlog")
D <- getParam(a.ln, "sdlog")
#Building the table
result[[i]] <- data.frame(cbind(Parameter1 = c(paste("k=", round(K, digits = 4)), paste("alpha=", round(alpha, digits = 4)), paste("m=", round(m, digits = 4))),
Parameter2 = c(paste("C=", round(A, digits = 4)), paste("beta=", round(beta, digits = 4)),paste("D=", round(D,digits = 4))),
loglik = c(round(a.wei$loglik, digits = 4), round(a.gamma$loglik, digits = 4), round(a.ln$loglik, digits = 4)),
aic = c(round(a.wei$aic, digits = 4), round(a.gamma$aic, digits = 4), round(a.ln$aic, digits = 4))),
row.names = c("Weibull", "Gamma", "Lognormal"))
data
source('~/GitHub/WindResource/R/tableWD.R')
source('~/GitHub/WindResource/R/tableWD.R')
Q
tableWD (data=wd10, type="fit")
for (i in ane.names){
#if (is.na(ane)[i]) {ane<-names(data$ane)[i]}
data <- data$ane[[i]]$ave
data <- data[!is.na(data)]
data <- data[data!=0]
vec <- seq(0, length(data), floor(length(data)/20000))
data <- data[vec]
# Estimating parameters for each distribution
a.wei <- fitWd(data, dist = "weibull")
a.gamma <- fitWd(data, dist = "gamma")
a.ln <- fitWd(data, dist = "lnorm")
# Taking parameters from each distribution
K <- getParam(a.wei, "k")
A <- getParam(a.wei, "A")
alpha <- getParam(a.gamma, "alpha")
beta <- getParam(a.gamma, "beta")
m <- getParam(a.ln, "meanlog")
D <- getParam(a.ln, "sdlog")
#Building the table
result[[i]] <- data.frame(cbind(Parameter1 = c(paste("k=", round(K, digits = 4)), paste("alpha=", round(alpha, digits = 4)), paste("m=", round(m, digits = 4))),
Parameter2 = c(paste("C=", round(A, digits = 4)), paste("beta=", round(beta, digits = 4)),paste("D=", round(D,digits = 4))),
loglik = c(round(a.wei$loglik, digits = 4), round(a.gamma$loglik, digits = 4), round(a.ln$loglik, digits = 4)),
aic = c(round(a.wei$aic, digits = 4), round(a.gamma$aic, digits = 4), round(a.ln$aic, digits = 4))),
row.names = c("Weibull", "Gamma", "Lognormal"))
}
i
data <- data$ane[[i]]$ave
str(data)
source('~/GitHub/WindResource/R/tableWD.R')
Q
tableWD (data=wd10, type="fit")
tableWD (data=wd10, type="fit")
i="Ane1"
dat <- data$ane[[i]]$ave
dat <- dat[!is.na(data)]
dat <- dat[data!=0]
vec <- seq(0, length(dat), floor(length(dat)/20000))
dat <- dat[vec]
# Estimating parameters for each distribution
vec <- seq(0, length(dat), floor(length(dat)/20000))
dat <- dat[vec]
dat <- dat[data!=0]
source('~/GitHub/WindResource/R/tableWD.R')
Q
tableWD (data=wd10, type="fit")
tableWD (data=wd10, type="fit")
i="Ane1"
dat <- data$ane[[i]]$ave
dat <- dat[!is.na(data)]
dat <- dat[dat!=0]
vec <- seq(0, length(dat), floor(length(dat)/20000))
dat <- dat[vec]
# Estimating parameters for each distribution
a.wei <- fitWd(dat, dist = "weibull")
dat
a.wei <- fitWd(dat, dist = "weibull")
fitWd
dat
summary(dat)
source('~/GitHub/WindResource/R/tableWD.R')
Q
tableWD (data=wd10, type="fit")
tableWD (data=wd10, type="fit")
i="Ane1"
dat <- data$ane[[i]]$ave
dat <- dat[!is.na(dat)]
dat <- dat[dat!=0]
vec <- seq(0, length(dat), floor(length(dat)/20000))
dat <- dat[vec]
# Estimating parameters for each distribution
a.wei <- fitWd(dat, dist = "weibull")
a.gamma <- fitWd(dat, dist = "gamma")
a.ln <- fitWd(dat, dist = "lnorm")
# Taking parameters from each distribution
K <- getParam(a.wei, "k")
A <- getParam(a.wei, "A")
alpha <- getParam(a.gamma, "alpha")
beta <- getParam(a.gamma, "beta")
m <- getParam(a.ln, "meanlog")
D <- getParam(a.ln, "sdlog")
#Building the table
result[[i]] <- data.frame(cbind(Parameter1 = c(paste("k=", round(K, digits = 4)), paste("alpha=", round(alpha, digits = 4)), paste("m=", round(m, digits = 4))),
Parameter2 = c(paste("C=", round(A, digits = 4)), paste("beta=", round(beta, digits = 4)),paste("D=", round(D,digits = 4))),
loglik = c(round(a.wei$loglik, digits = 4), round(a.gamma$loglik, digits = 4), round(a.ln$loglik, digits = 4)),
aic = c(round(a.wei$aic, digits = 4), round(a.gamma$aic, digits = 4), round(a.ln$aic, digits = 4))),
row.names = c("Weibull", "Gamma", "Lognormal"))
for (i in ane.names){
#if (is.na(ane)[i]) {ane<-names(data$ane)[i]}
dat <- data$ane[[i]]$ave
dat <- dat[!is.na(dat)]
dat <- dat[dat!=0]
vec <- seq(0, length(dat), floor(length(dat)/20000))
dat <- dat[vec]
# Estimating parameters for each distribution
a.wei <- fitWd(dat, dist = "weibull")
a.gamma <- fitWd(dat, dist = "gamma")
a.ln <- fitWd(dat, dist = "lnorm")
# Taking parameters from each distribution
K <- getParam(a.wei, "k")
A <- getParam(a.wei, "A")
alpha <- getParam(a.gamma, "alpha")
beta <- getParam(a.gamma, "beta")
m <- getParam(a.ln, "meanlog")
D <- getParam(a.ln, "sdlog")
#Building the table
result[[i]] <- data.frame(cbind(Parameter1 = c(paste("k=", round(K, digits = 4)), paste("alpha=", round(alpha, digits = 4)), paste("m=", round(m, digits = 4))),
Parameter2 = c(paste("C=", round(A, digits = 4)), paste("beta=", round(beta, digits = 4)),paste("D=", round(D,digits = 4))),
loglik = c(round(a.wei$loglik, digits = 4), round(a.gamma$loglik, digits = 4), round(a.ln$loglik, digits = 4)),
aic = c(round(a.wei$aic, digits = 4), round(a.gamma$aic, digits = 4), round(a.ln$aic, digits = 4))),
row.names = c("Weibull", "Gamma", "Lognormal"))
}
i
dat <- data$ane[[i]]$ave
dat <- dat[!is.na(dat)]
dat <- dat[dat!=0]
vec <- seq(0, length(dat), floor(length(dat)/20000))
dat <- dat[vec]
# Estimating parameters for each distribution
vec <- seq(0, length(dat), floor(length(dat)/20000))
dat <- dat[vec]
dat <- dat[!is.na(dat)]
dat <- dat[dat!=0]
vec <- seq(0, length(dat), floor(length(dat)/20000))
floor(length(dat)/20000)
dat
length(dat)
source('~/GitHub/WindResource/R/tableWD.R')
Q
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/tableWD.R')
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/tableWD.R')
source('~/GitHub/WindResource/R/plotWD.R')
source('~/GitHub/WindResource/R/plotWD.R')
source('~/GitHub/WindResource/R/plotWD.R')
source('~/GitHub/WindResource/R/plotWD.R')
source('~/GitHub/WindResource/R/plotWD.R')
plotWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/plotWD.R')
plotWD (data=wd10, type="fit")
c <- seq(0,0.9999,length=length(data))
dist.teo_w <- qweibull(c[1:length(c)],shape=K, scale=A)
qqplot(dist.teo_w,data,main="QQ-plot Dist. Weibull", xlab="theoretical distribution", ylab="speed")
source('~/GitHub/WindResource/R/plotWD.R')
Q
plotWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/plotWD.R')
source('~/GitHub/WindResource/R/plotWD.R')
plotWD (data=wd10, type="fit")
plotWD (data=wd10, ane="Ane1",type="fit")
source('~/R/win-library/3.0/WindResource/shiny/ui.R')
tools::showNonASCII(readLines("~/GitHub/WindResource/R/plotWD.R"))
source('~/R/win-library/3.0/WindResource/shiny/ui.R')
runGUI(wd10)
remove.packages("WindResource")
source('~/GitHub/WindResource/R/tableWD.R')
library(WindResource)
data(wd)
data(wd10)
wd10$dir$ang_16 <- (wd10$dir$sect_16-1)*22.5
class(wd10)<-"windata"
runGUI(wd10)
plotWD (data=wd10, type="fit")
plot.wind.serie(wd10,2013,2,vars=c("Ave","Min","Max","Dir"),
axis=c("Ave","Min","Max","Dir"))
plotWD (data=wd10, type="fit")
library(WindResource)
data(wd10)
wd10$dir$ang_16 <- (wd10$dir$sect_16-1)*22.5
class(wd10)<-"windata"
runGUI(wd10)
1|0
0|0
1|1
library(WindResource)
library("WindResource")
data(wd10)
wd10$dir$ang_16 <- (wd10$dir$sect_16-1)*22.5
class(wd10)<-"windata"
runGUI(wd10)
Q
library(WindResource)
data(wd10)
wd10$dir$ang_16 <- (wd10$dir$sect_16-1)*22.5
class(wd10)<-"windata"
runGUI(wd10)
install.packages("httpuv")
install.packages("devtools"); devtools::install_github("shiny", "rstudio")
install.packages("httpuv")
source('~/GitHub/WindResource/R/runGUI.R')
runGUI(wd10, T)
runGUI(wd10, F)
data(wd10)
runGUI(wd10, F)
wd10$dir$ang_16 <- (wd10$dir$sect_16-1)*22.5
class(wd10)<-"windata"
runGUI(wd10, T)
runGUI(wd10, F)
path.package("WindResource")
library("WindResource", lib.loc="C:/Users/mbonoli/Documents/R/win-library/3.0")
runGUI(wd10, T)
plotWD (data=wd10,ane=c("Ane1", "Ane2"),var="speed", type="fit", by="none")
plotWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/plotWD.R')
plotWD (data=wd10, type="fit")
plotWD (data=wd10, type="fit")
ane
head(data)
plotWD (data=wd10, type="fit")
plotWD (data=wd10, type="fit")
dist
source('~/GitHub/WindResource/R/plotWD.R')
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/tableWD.R')
tableWD (data=wd10, type="fit")
source('~/GitHub/WindResource/R/tableWD.R')
tableWD (data=wd10, type="fit")
library(WindResource)
